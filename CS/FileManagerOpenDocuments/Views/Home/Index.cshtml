@{
    ViewData["Title"] = "File Manager - How to open documents";
}
<h1>File Manager - How to open documents</h1>


@(Html.DevExtreme().FileManager()
    .ID("fileManager")
    .FileProvider(fileProvider => fileProvider
        .Remote()
        .Url(Url.Action("FileSystem", "FileManagerApi")))
    .ItemView(v => v.Mode(FileManagerItemViewMode.Thumbnails))
    .Permissions(permissions => permissions
        .Create(false)
        .Copy(false)
        .Move(false)
        .Remove(false)
        .Rename(false)
        .Upload(false)
        .Download(true))
    .OnSelectedFileOpened("onSelectedFileOpened")
)

@(Html.DevExtreme().Popup()
    .ID("dialogPopup")
    .Width("1300px")
    .Height("900px")
    .Shading(true)
.CloseOnOutsideClick(true)
)

@using (Html.DevExtreme().NamedTemplate("wordTemplate")) {
    await Html.RenderPartialAsync("RichEditPartial");
}
@using (Html.DevExtreme().NamedTemplate("excelTemplate")) {
    ViewContext.Writer.Write("<div id='excel'>");
    await Html.RenderPartialAsync("SpreadsheetPartial");
    ViewContext.Writer.Write("</div>");
}
<script>
    function onSelectedFileOpened(args) {
            let extension = getFileItemExtension(args.fileItem.name);
            switch (extension) {
                case "xlsx":
                    openExcelInDialog(args.fileItem);
                    break;
                case "docx":
                    openWordInDialog(args.fileItem, DevExpress.RichEdit.DocumentFormat.OpenXml);
                    break;
                case "txt":
                    openWordInDialog(args.fileItem, DevExpress.RichEdit.DocumentFormat.PlainText);
                    break;
                case "rtf":
                    openWordInDialog(args.fileItem, DevExpress.RichEdit.DocumentFormat.Rtf);
                    break;
                default:
            }
    }
    function openWordInDialog(fileItem, fileType) {
        let provider = $("#fileManager").dxFileManager("instance").option("fileProvider");
        provider.getItemContent([fileItem]).done(function (arrayBuffer) {
            openDialog(fileItem, "wordTemplate");
            let base64Content = fromArrayBuffer(arrayBuffer);
            richEdit.openDocument(base64Content, fileItem.name, fileType);
        });
    }
     function openExcelInDialog(fileItem) {
        openDialog(fileItem, "excelTemplate");
        $.ajax({
                type: 'POST',
                url: '@Url.Action("OpenDocInSpreadsheet", "Home")',
                data: { filePath: fileItem.key},
                success: function (result) {
                    $("#excel").html(result);
                }
        });
    }
    function fromArrayBuffer(buffer) {
        const binary = [];
        const bytes = new Uint8Array(buffer);
        const len = bytes.byteLength;
        for (let i = 0; i < len; i++)
            binary.push(String.fromCharCode(bytes[i]));
        return window.btoa(binary.join(''));
    }
    function getFileItemExtension(name) {
        return name.split('.').pop();
    }
    function openDialog(fileItem, type) {
        let popup = $("#dialogPopup").dxPopup("instance");
        popup.option("title", fileItem.name);
        popup.option("contentTemplate", $("#"+ type));
        popup.show();
    }
</script>
